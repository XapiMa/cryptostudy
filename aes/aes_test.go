package aes

import (
	"bytes"
	"testing"
)

func TestSubBytes(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128

	inputs := [][]byte{
		[]byte{0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0},
	}
	expected := [][]byte{
		[]byte{0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70, 0xe1, 0x8c},
	}

	for i, input := range inputs {
		subBytes(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestSubBytes] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestShiftRows(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128

	inputs := [][]byte{
		[]byte{0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70, 0xe1, 0x8c},
	}
	expected := [][]byte{
		[]byte{0x63, 0x53, 0xe0, 0x8c, 0x09, 0x60, 0xe1, 0x04, 0xcd, 0x70, 0xb7, 0x51, 0xba, 0xca, 0xd0, 0xe7},
	}

	for i, input := range inputs {
		shiftRows(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestSubBytes] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestMixColumns(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128

	inputs := [][]byte{
		[]byte{0x63, 0x53, 0xe0, 0x8c, 0x09, 0x60, 0xe1, 0x04, 0xcd, 0x70, 0xb7, 0x51, 0xba, 0xca, 0xd0, 0xe7},
	}
	expected := [][]byte{
		[]byte{0x5f, 0x72, 0x64, 0x15, 0x57, 0xf5, 0xbc, 0x92, 0xf7, 0xbe, 0x3b, 0x29, 0x1d, 0xb9, 0xf9, 0x1a},
	}

	for i, input := range inputs {
		mixColumns(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestSubBytes] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}
