package aes

import (
	"bytes"
	"testing"
)

func TestCipher(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128
	Nk = KeyLength128

	inputs := [][]byte{
		[]byte{0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff},
	}
	keys := [][]byte{
		[]byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
	}
	expected := [][]byte{
		[]byte{0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32},
		[]byte{0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a},
	}

	for i, input := range inputs {
		cipherText := make([]byte, len(input))
		Cipher(input, cipherText, keys[i])
		if !bytes.Equal(cipherText, expected[i]) {
			t.Errorf("[TestCipher] case %d failed: cipherText != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestKeyExpansion(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128
	Nk = KeyLength128

	inputs := [][]byte{
		[]byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
	}
	expected := [][]byte{
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05,
			0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f,
			0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b,
			0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00,
			0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc,
			0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd,
			0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f,
			0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f,
			0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e,
			0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6,
		},
	}

	for i, input := range inputs {
		expanded := make([]byte, BytesOfWords*Nb*(Nr+1))
		keyExpansion(input, expanded)
		if !bytes.Equal(expanded, expected[i]) {
			t.Errorf("[TestKeyExpansion] case %d failed: expanded != expected : '%v' != '%v'", i, expanded, expected[i])
		}
	}
}

func TestRotWord(t *testing.T) {
	inputs := [][]byte{
		[]byte{0x09, 0xcf, 0x4f, 0x3c},
		[]byte{0x2a, 0x6c, 0x76, 0x05},
	}
	expected := [][]byte{
		[]byte{0xcf, 0x4f, 0x3c, 0x09},
		[]byte{0x6c, 0x76, 0x05, 0x2a},
	}

	for i, input := range inputs {
		rotWord(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestRotWord] case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestSubWord(t *testing.T) {
	inputs := [][]byte{
		[]byte{0xcf, 0x4f, 0x3c, 0x09},
		[]byte{0x6c, 0x76, 0x05, 0x2a},
	}
	expected := [][]byte{
		[]byte{0x8a, 0x84, 0xeb, 0x01},
		[]byte{0x50, 0x38, 0x6b, 0xe5},
	}

	for i, input := range inputs {
		subWord(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestSubWord] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestSubBytes(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128

	inputs := [][]byte{
		[]byte{0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0},
		[]byte{0x19, 0x3d, 0xe3, 0xbe, 0xa0, 0xf4, 0xe2, 0x2b, 0x9a, 0xc6, 0x8d, 0x2a, 0xe9, 0xf8, 0x48, 0x08},
	}
	expected := [][]byte{
		[]byte{0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70, 0xe1, 0x8c},
		[]byte{0xd4, 0x27, 0x11, 0xae, 0xe0, 0xbf, 0x98, 0xf1, 0xb8, 0xb4, 0x5d, 0xe5, 0x1e, 0x41, 0x52, 0x30},
	}

	for i, input := range inputs {
		subBytes(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestSubBytes] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestShiftRows(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128

	inputs := [][]byte{
		[]byte{0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70, 0xe1, 0x8c},
		[]byte{0xd4, 0x27, 0x11, 0xae, 0xe0, 0xbf, 0x98, 0xf1, 0xb8, 0xb4, 0x5d, 0xe5, 0x1e, 0x41, 0x52, 0x30},
	}
	expected := [][]byte{
		[]byte{0x63, 0x53, 0xe0, 0x8c, 0x09, 0x60, 0xe1, 0x04, 0xcd, 0x70, 0xb7, 0x51, 0xba, 0xca, 0xd0, 0xe7},
		[]byte{0xd4, 0xbf, 0x5d, 0x30, 0xe0, 0xb4, 0x52, 0xae, 0xb8, 0x41, 0x11, 0xf1, 0x1e, 0x27, 0x98, 0xe5},
	}

	for i, input := range inputs {
		shiftRows(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestShiftRows] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}

func TestMixColumns(t *testing.T) {
	Nb = BlockSize128
	Nr = NumOfRounds128

	inputs := [][]byte{
		[]byte{0x63, 0x53, 0xe0, 0x8c, 0x09, 0x60, 0xe1, 0x04, 0xcd, 0x70, 0xb7, 0x51, 0xba, 0xca, 0xd0, 0xe7},
		[]byte{0xd4, 0xbf, 0x5d, 0x30, 0xe0, 0xb4, 0x52, 0xae, 0xb8, 0x41, 0x11, 0xf1, 0x1e, 0x27, 0x98, 0xe5},
	}
	expected := [][]byte{
		[]byte{0x5f, 0x72, 0x64, 0x15, 0x57, 0xf5, 0xbc, 0x92, 0xf7, 0xbe, 0x3b, 0x29, 0x1d, 0xb9, 0xf9, 0x1a},
		[]byte{0x04, 0x66, 0x81, 0xe5, 0xe0, 0xcb, 0x19, 0x9a, 0x48, 0xf8, 0xd3, 0x7a, 0x28, 0x06, 0x26, 0x4c},
	}

	for i, input := range inputs {
		mixColumns(input)
		if !bytes.Equal(input, expected[i]) {
			t.Errorf("[TestMixColumns] Case %d failed: input != expected : '%v' != '%v'", i, input, expected[i])
		}
	}
}
